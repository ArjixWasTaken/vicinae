/// <reference types="node" />
import { MessagePort } from "worker_threads";
export type Message<T = Record<string, any>> = {
    envelope: {
        id: string;
        type: 'request' | 'response' | 'event';
        action: string;
    };
    error: {
        message?: string;
    } | null;
    data: T;
};
declare namespace EventListener {
    type ArgValue = string | number | Record<any, any> | boolean | null | undefined;
    type Callback = (...args: EventListener.ArgValue[]) => void;
}
type EventListenerInfo = {
    id: string;
    callback: EventListener.Callback;
};
declare class Bus {
    private readonly port;
    private requestMap;
    private eventListeners;
    private handleMessage;
    constructor(port: MessagePort);
    listEventListeners(type: string): EventListenerInfo[];
    subscribe(type: string, cb: EventListenerInfo['callback']): {
        unsubscribe: () => void;
    };
    emit(action: string, data: Record<string, any>): void;
    request<T = Record<string, any>>(action: string, data?: Record<string, any>, options?: {
        timeout?: number;
        rejectOnError?: boolean;
    }): Promise<Message<T>>;
}
export declare const createHandler: (handler: (...args: any[]) => void) => string;
export declare const bus: Bus;
export {};

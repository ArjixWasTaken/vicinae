import React, { ReactNode } from 'react';
import { Image, ImageLike } from '../image';
import { Color, ColorLike } from '../color';
export declare namespace Grid {
    enum Fit {
        Contain = "contain",
        Fill = "fill"
    }
    type AspectRatio = '1' | '3/2' | '2/3' | '4/3' | '3/4' | '16/9' | '9/16';
    enum Inset {
        Small = "small",
        Medium = "medium",
        Large = "large"
    }
    namespace Section {
        type SectionConfig = {
            inset?: Inset;
            columns?: number;
            fit?: Grid.Fit;
            aspectRatio?: AspectRatio;
        };
        type Props = SectionConfig & {
            title?: string;
            subtitle?: string;
            children?: ReactNode;
        };
    }
    type Props = Grid.Section.SectionConfig & {
        actions?: React.ReactNode;
        children?: React.ReactNode;
        filtering?: boolean;
        /**
         * @deprecated use filtering
         */
        enableFiltering?: boolean;
        isLoading?: boolean;
        searchText?: string;
        searchBarPlaceholder?: string;
        navigationTitle?: string;
        searchBarAccessory?: ReactNode;
        onSearchTextChange?: (text: string) => void;
        onSelectionChange?: (id: string) => void;
    };
    namespace Item {
        type Props = {
            title: string;
            detail?: React.ReactNode;
            icon?: ImageLike;
            id?: string;
            subtitle?: string;
            actions?: ReactNode;
            accessories?: Grid.Item.Accessory[];
        };
        type Tag = string | Date | undefined | null | {
            color: ColorLike;
            value: string | Date | undefined | null;
        };
        type Text = string | Date | undefined | null | {
            color: Color;
            value: string | Date | undefined | null;
        };
        type Accessory = ({
            tag?: Tag;
        } | {
            text?: Text;
        }) & {
            icon?: Image.ImageLike;
            tooltip?: string | null;
        };
    }
}
export declare const ListAccessory: React.FC<Grid.Item.Accessory>;
export declare const List: React.FC<Grid.Props> & {
    Section: React.FC<Grid.Section.Props>;
    EmptyView: React.FC<import("./empty-view").EmptyViewProps>;
    Dropdown: React.FC<{
        tooltip?: string | undefined;
        children?: React.ReactNode;
        defaultValue?: string | undefined;
        filtering?: boolean | undefined;
        id?: string | undefined;
        isLoading?: boolean | undefined;
        placeholder?: string | undefined;
        storeValue?: boolean | undefined;
        throttle?: boolean | undefined;
        value?: string | undefined;
        onChange?: ((newValue: string) => void) | undefined;
        onSearchTextChange?: ((text: string) => void) | undefined;
    }> & {
        Item: React.FC<{
            title: string;
            value: string;
            icon?: Image.ImageLike | undefined;
            keywords?: string[] | undefined;
        }>;
        Section: React.FC<{
            title?: string | undefined;
            children?: React.ReactNode;
        }>;
    };
    Item: React.FC<Grid.Item.Props> & {
        Accessory: React.FC<Grid.Item.Accessory>;
    };
};

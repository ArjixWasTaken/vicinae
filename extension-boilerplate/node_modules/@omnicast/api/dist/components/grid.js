"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.List = exports.ListAccessory = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const image_1 = require("../image");
const crypto_1 = require("crypto");
const empty_view_1 = require("./empty-view");
const hooks_1 = require("../hooks");
const dropdown_1 = require("./dropdown");
;
const GridRoot = ({ onSearchTextChange, searchBarAccessory, onSelectionChange, children, actions, inset = Grid.Inset.Small, fit = Grid.Fit.Contain, aspectRatio = '1', ...props }) => {
    const searchTextChangeHandler = (0, hooks_1.useEventListener)(onSearchTextChange);
    const selectionChangeHandler = (0, hooks_1.useEventListener)(onSelectionChange);
    if (typeof props.enableFiltering === "boolean" && typeof props.filtering === "undefined") {
        props.filtering = props.enableFiltering;
    }
    return (0, jsx_runtime_1.jsxs)("grid", { fit: fit, inset: inset, aspectRatio: aspectRatio, onSearchTextChange: searchTextChangeHandler, onSelectionChange: selectionChangeHandler, ...props, children: [searchBarAccessory, children, actions] });
};
const GridItem = ({ detail, actions, ...props }) => {
    const id = (0, react_1.useRef)(props.id ?? (0, crypto_1.randomUUID)());
    const nativeProps = {
        title: props.title,
        subtitle: props.subtitle,
        id: id.current,
    };
    if (props.icon)
        nativeProps.icon = (0, image_1.serializeImageLike)(props.icon);
    return ((0, jsx_runtime_1.jsxs)("grid-item", { ...nativeProps, children: [detail, actions] }));
};
const GridSection = ({ fit = Grid.Fit.Contain, aspectRatio = '1', inset = Grid.Inset.Small, ...props }) => {
    const nativeProps = {
        fit,
        aspectRatio,
        ...props
    };
    return (0, jsx_runtime_1.jsx)("grid-section", { ...nativeProps });
};
const ListAccessory = (props) => {
    return (0, jsx_runtime_1.jsx)("list-accessory", {});
};
exports.ListAccessory = ListAccessory;
exports.List = Object.assign(GridRoot, {
    Section: GridSection,
    EmptyView: empty_view_1.EmptyView,
    Dropdown: dropdown_1.Dropdown,
    Item: Object.assign(GridItem, {
        Accessory: exports.ListAccessory
    }),
});

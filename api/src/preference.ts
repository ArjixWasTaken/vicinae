// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.30.2
// source: preference.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "preference";

export interface Preference {
  id: string;
  type: string;
  isRequired: boolean;
  title: string;
  description: string;
  placeholder: string;
  data: Data | undefined;
}

export interface Data {
  text?: TextData | undefined;
  password?: PasswordData | undefined;
  checkbox?: CheckboxData | undefined;
  appPicker?: AppPickerData | undefined;
  filePicker?: FilePickerData | undefined;
  directoryPicker?: DirectoryPickerData | undefined;
  dropdown?: DropdownData | undefined;
}

export interface TextData {
}

export interface PasswordData {
}

export interface CheckboxData {
  label: string;
}

export interface AppPickerData {
}

export interface FilePickerData {
}

export interface DirectoryPickerData {
}

export interface DropdownOption {
  title: string;
  value: string;
}

export interface DropdownData {
  options: DropdownOption[];
}

function createBasePreference(): Preference {
  return { id: "", type: "", isRequired: false, title: "", description: "", placeholder: "", data: undefined };
}

export const Preference: MessageFns<Preference> = {
  encode(message: Preference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.isRequired !== false) {
      writer.uint32(24).bool(message.isRequired);
    }
    if (message.title !== "") {
      writer.uint32(34).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.placeholder !== "") {
      writer.uint32(50).string(message.placeholder);
    }
    if (message.data !== undefined) {
      Data.encode(message.data, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Preference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isRequired = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.placeholder = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.data = Data.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Preference {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      isRequired: isSet(object.isRequired) ? globalThis.Boolean(object.isRequired) : false,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      placeholder: isSet(object.placeholder) ? globalThis.String(object.placeholder) : "",
      data: isSet(object.data) ? Data.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: Preference): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.isRequired !== false) {
      obj.isRequired = message.isRequired;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.placeholder !== "") {
      obj.placeholder = message.placeholder;
    }
    if (message.data !== undefined) {
      obj.data = Data.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Preference>, I>>(base?: I): Preference {
    return Preference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Preference>, I>>(object: I): Preference {
    const message = createBasePreference();
    message.id = object.id ?? "";
    message.type = object.type ?? "";
    message.isRequired = object.isRequired ?? false;
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.placeholder = object.placeholder ?? "";
    message.data = (object.data !== undefined && object.data !== null) ? Data.fromPartial(object.data) : undefined;
    return message;
  },
};

function createBaseData(): Data {
  return {
    text: undefined,
    password: undefined,
    checkbox: undefined,
    appPicker: undefined,
    filePicker: undefined,
    directoryPicker: undefined,
    dropdown: undefined,
  };
}

export const Data: MessageFns<Data> = {
  encode(message: Data, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      TextData.encode(message.text, writer.uint32(10).fork()).join();
    }
    if (message.password !== undefined) {
      PasswordData.encode(message.password, writer.uint32(18).fork()).join();
    }
    if (message.checkbox !== undefined) {
      CheckboxData.encode(message.checkbox, writer.uint32(26).fork()).join();
    }
    if (message.appPicker !== undefined) {
      AppPickerData.encode(message.appPicker, writer.uint32(34).fork()).join();
    }
    if (message.filePicker !== undefined) {
      FilePickerData.encode(message.filePicker, writer.uint32(42).fork()).join();
    }
    if (message.directoryPicker !== undefined) {
      DirectoryPickerData.encode(message.directoryPicker, writer.uint32(50).fork()).join();
    }
    if (message.dropdown !== undefined) {
      DropdownData.encode(message.dropdown, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Data {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = TextData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = PasswordData.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.checkbox = CheckboxData.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.appPicker = AppPickerData.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.filePicker = FilePickerData.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.directoryPicker = DirectoryPickerData.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.dropdown = DropdownData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Data {
    return {
      text: isSet(object.text) ? TextData.fromJSON(object.text) : undefined,
      password: isSet(object.password) ? PasswordData.fromJSON(object.password) : undefined,
      checkbox: isSet(object.checkbox) ? CheckboxData.fromJSON(object.checkbox) : undefined,
      appPicker: isSet(object.appPicker) ? AppPickerData.fromJSON(object.appPicker) : undefined,
      filePicker: isSet(object.filePicker) ? FilePickerData.fromJSON(object.filePicker) : undefined,
      directoryPicker: isSet(object.directoryPicker) ? DirectoryPickerData.fromJSON(object.directoryPicker) : undefined,
      dropdown: isSet(object.dropdown) ? DropdownData.fromJSON(object.dropdown) : undefined,
    };
  },

  toJSON(message: Data): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = TextData.toJSON(message.text);
    }
    if (message.password !== undefined) {
      obj.password = PasswordData.toJSON(message.password);
    }
    if (message.checkbox !== undefined) {
      obj.checkbox = CheckboxData.toJSON(message.checkbox);
    }
    if (message.appPicker !== undefined) {
      obj.appPicker = AppPickerData.toJSON(message.appPicker);
    }
    if (message.filePicker !== undefined) {
      obj.filePicker = FilePickerData.toJSON(message.filePicker);
    }
    if (message.directoryPicker !== undefined) {
      obj.directoryPicker = DirectoryPickerData.toJSON(message.directoryPicker);
    }
    if (message.dropdown !== undefined) {
      obj.dropdown = DropdownData.toJSON(message.dropdown);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Data>, I>>(base?: I): Data {
    return Data.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Data>, I>>(object: I): Data {
    const message = createBaseData();
    message.text = (object.text !== undefined && object.text !== null) ? TextData.fromPartial(object.text) : undefined;
    message.password = (object.password !== undefined && object.password !== null)
      ? PasswordData.fromPartial(object.password)
      : undefined;
    message.checkbox = (object.checkbox !== undefined && object.checkbox !== null)
      ? CheckboxData.fromPartial(object.checkbox)
      : undefined;
    message.appPicker = (object.appPicker !== undefined && object.appPicker !== null)
      ? AppPickerData.fromPartial(object.appPicker)
      : undefined;
    message.filePicker = (object.filePicker !== undefined && object.filePicker !== null)
      ? FilePickerData.fromPartial(object.filePicker)
      : undefined;
    message.directoryPicker = (object.directoryPicker !== undefined && object.directoryPicker !== null)
      ? DirectoryPickerData.fromPartial(object.directoryPicker)
      : undefined;
    message.dropdown = (object.dropdown !== undefined && object.dropdown !== null)
      ? DropdownData.fromPartial(object.dropdown)
      : undefined;
    return message;
  },
};

function createBaseTextData(): TextData {
  return {};
}

export const TextData: MessageFns<TextData> = {
  encode(_: TextData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TextData {
    return {};
  },

  toJSON(_: TextData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<TextData>, I>>(base?: I): TextData {
    return TextData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TextData>, I>>(_: I): TextData {
    const message = createBaseTextData();
    return message;
  },
};

function createBasePasswordData(): PasswordData {
  return {};
}

export const PasswordData: MessageFns<PasswordData> = {
  encode(_: PasswordData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PasswordData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePasswordData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PasswordData {
    return {};
  },

  toJSON(_: PasswordData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PasswordData>, I>>(base?: I): PasswordData {
    return PasswordData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PasswordData>, I>>(_: I): PasswordData {
    const message = createBasePasswordData();
    return message;
  },
};

function createBaseCheckboxData(): CheckboxData {
  return { label: "" };
}

export const CheckboxData: MessageFns<CheckboxData> = {
  encode(message: CheckboxData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.label !== "") {
      writer.uint32(10).string(message.label);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckboxData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckboxData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.label = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckboxData {
    return { label: isSet(object.label) ? globalThis.String(object.label) : "" };
  },

  toJSON(message: CheckboxData): unknown {
    const obj: any = {};
    if (message.label !== "") {
      obj.label = message.label;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckboxData>, I>>(base?: I): CheckboxData {
    return CheckboxData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckboxData>, I>>(object: I): CheckboxData {
    const message = createBaseCheckboxData();
    message.label = object.label ?? "";
    return message;
  },
};

function createBaseAppPickerData(): AppPickerData {
  return {};
}

export const AppPickerData: MessageFns<AppPickerData> = {
  encode(_: AppPickerData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppPickerData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppPickerData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AppPickerData {
    return {};
  },

  toJSON(_: AppPickerData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<AppPickerData>, I>>(base?: I): AppPickerData {
    return AppPickerData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AppPickerData>, I>>(_: I): AppPickerData {
    const message = createBaseAppPickerData();
    return message;
  },
};

function createBaseFilePickerData(): FilePickerData {
  return {};
}

export const FilePickerData: MessageFns<FilePickerData> = {
  encode(_: FilePickerData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilePickerData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilePickerData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FilePickerData {
    return {};
  },

  toJSON(_: FilePickerData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FilePickerData>, I>>(base?: I): FilePickerData {
    return FilePickerData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilePickerData>, I>>(_: I): FilePickerData {
    const message = createBaseFilePickerData();
    return message;
  },
};

function createBaseDirectoryPickerData(): DirectoryPickerData {
  return {};
}

export const DirectoryPickerData: MessageFns<DirectoryPickerData> = {
  encode(_: DirectoryPickerData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DirectoryPickerData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDirectoryPickerData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DirectoryPickerData {
    return {};
  },

  toJSON(_: DirectoryPickerData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DirectoryPickerData>, I>>(base?: I): DirectoryPickerData {
    return DirectoryPickerData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DirectoryPickerData>, I>>(_: I): DirectoryPickerData {
    const message = createBaseDirectoryPickerData();
    return message;
  },
};

function createBaseDropdownOption(): DropdownOption {
  return { title: "", value: "" };
}

export const DropdownOption: MessageFns<DropdownOption> = {
  encode(message: DropdownOption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DropdownOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDropdownOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DropdownOption {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DropdownOption): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DropdownOption>, I>>(base?: I): DropdownOption {
    return DropdownOption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DropdownOption>, I>>(object: I): DropdownOption {
    const message = createBaseDropdownOption();
    message.title = object.title ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseDropdownData(): DropdownData {
  return { options: [] };
}

export const DropdownData: MessageFns<DropdownData> = {
  encode(message: DropdownData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.options) {
      DropdownOption.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DropdownData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDropdownData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.options.push(DropdownOption.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DropdownData {
    return {
      options: globalThis.Array.isArray(object?.options)
        ? object.options.map((e: any) => DropdownOption.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DropdownData): unknown {
    const obj: any = {};
    if (message.options?.length) {
      obj.options = message.options.map((e) => DropdownOption.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DropdownData>, I>>(base?: I): DropdownData {
    return DropdownData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DropdownData>, I>>(object: I): DropdownData {
    const message = createBaseDropdownData();
    message.options = object.options?.map((e) => DropdownOption.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

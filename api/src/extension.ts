// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.30.2
// source: extension.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "./google/protobuf/any";
import { Preference } from "./preference";

export const protobufPackage = "protocols.extensions";

export interface IpcMessage {
  extensionRequest?: QualifiedExtensionRequest | undefined;
  extensionResponse?: QualifiedExtensionResponse | undefined;
  extensionEvent?: QualifiedExtensionEvent | undefined;
  managerRequest?: ManagerRequest | undefined;
  managerResponse?: ManagerResponse | undefined;
}

export interface ErrorResponseData {
  errorText: string;
}

export interface ManagerRequestData {
  listExtensions?: ListExtensionsRequest | undefined;
}

export interface ManagerRequest {
  requestId: string;
  payload: ManagerRequestData | undefined;
}

export interface ManagerResponseData {
  ack?: AckResponse | undefined;
  extensionList?: ListExtensionsResponse | undefined;
  error?: ErrorResponseData | undefined;
}

export interface ManagerResponse {
  requestId: string;
  payload: ManagerResponseData | undefined;
}

export interface ListExtensionsRequest {
}

export interface ListExtensionsResponse {
  extensionList: ExtensionInfo[];
}

export interface CommandArgument {
  name: string;
  type: string;
  isRequired: boolean;
  placeholder: string;
}

export interface ExtensionInfo {
  manifest: ExtensionManifest | undefined;
}

export interface ExtensionManifest {
  id: string;
  name: string;
  description: string;
  categories: string[];
  author: string;
  /** implement dark/light variant */
  icon: string;
  commands: CommandManifest[];
  preferences: Preference[];
}

export interface CommandManifest {
  id: string;
  title: string;
  description: string;
  mode: string;
  preferences: Preference[];
  arguments: CommandArgument[];
}

export interface QualifiedExtensionRequest {
  requestId: string;
  sessionId: string;
  request: ExtensionRequestData | undefined;
}

export interface QualifiedExtensionResponse {
  requestId: string;
  sessionId: string;
  response: ExtensionResponse | undefined;
}

export interface QualifiedExtensionEvent {
  id: string;
  sessionId: string;
}

export interface AckResponse {
}

export interface ExtensionResponse {
  requestId: string;
  data?: ExtensionResponseData | undefined;
  error?: ErrorResponseData | undefined;
}

export interface ExtensionResponseData {
  ack?: AckResponse | undefined;
  listApplications?: ListApplicationResponse | undefined;
  error?: ErrorResponseData | undefined;
}

export interface ExtensionEvent {
  id: string;
  args: Any[];
}

export interface ExtensionMessage {
  request?: ExtensionRequest | undefined;
  response?: ExtensionResponse | undefined;
  event?: ExtensionEvent | undefined;
}

export interface ExtensionRequest {
  requestId: string;
  data: ExtensionRequestData | undefined;
}

export interface ExtensionRequestData {
  render?: RenderRequest | undefined;
  listApps?: ListApplicationRequest | undefined;
  openApps?: OpenApplicationRequest | undefined;
  showToast?: ShowToastRequest | undefined;
  clipboardCopy?: CopyToClipboardRequest | undefined;
  pushView?: PushViewRequest | undefined;
  popView?: PopViewRequest | undefined;
  clearSearch?: ClearSearchBarRequest | undefined;
  closeMainWindow?: CloseMainWindowRequest | undefined;
  showHud?: ShowHudRequest | undefined;
}

export interface Application {
  id: string;
  name: string;
  icon: string;
}

export interface ShowToastRequest {
  title: string;
  style: string;
}

export interface PushViewRequest {
}

export interface PopViewRequest {
}

export interface CloseMainWindowRequest {
}

export interface ClearSearchBarRequest {
}

export interface ShowHudRequest {
  text: string;
}

export interface ClipboardHtmlContent {
  html: string;
  text: string;
}

export interface ClipboardPathContent {
  path: string;
}

export interface ClipboardOptions {
  concealed: boolean;
}

export interface CopyToClipboardRequest {
  options: ClipboardOptions | undefined;
  text?: string | undefined;
  html?: ClipboardHtmlContent | undefined;
  path?: ClipboardPathContent | undefined;
}

export interface OpenApplicationRequest {
  target: string;
  appId?: string | undefined;
}

export interface ListApplicationRequest {
}

export interface ListApplicationResponse {
  apps: Application[];
}

export interface RenderRequest {
  /**
   * repeated RenderNode views = 1;
   * we will migrate to actual protobuf
   */
  json: string;
}

export interface RenderNode {
  type: string;
  hasDirtyChild: boolean;
  hasDirtyProps: boolean;
  /** map<string, google.protobuf.Any> props = 4; */
  children: RenderNode[];
}

function createBaseIpcMessage(): IpcMessage {
  return {
    extensionRequest: undefined,
    extensionResponse: undefined,
    extensionEvent: undefined,
    managerRequest: undefined,
    managerResponse: undefined,
  };
}

export const IpcMessage: MessageFns<IpcMessage> = {
  encode(message: IpcMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.extensionRequest !== undefined) {
      QualifiedExtensionRequest.encode(message.extensionRequest, writer.uint32(10).fork()).join();
    }
    if (message.extensionResponse !== undefined) {
      QualifiedExtensionResponse.encode(message.extensionResponse, writer.uint32(18).fork()).join();
    }
    if (message.extensionEvent !== undefined) {
      QualifiedExtensionEvent.encode(message.extensionEvent, writer.uint32(26).fork()).join();
    }
    if (message.managerRequest !== undefined) {
      ManagerRequest.encode(message.managerRequest, writer.uint32(34).fork()).join();
    }
    if (message.managerResponse !== undefined) {
      ManagerResponse.encode(message.managerResponse, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IpcMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIpcMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.extensionRequest = QualifiedExtensionRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.extensionResponse = QualifiedExtensionResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.extensionEvent = QualifiedExtensionEvent.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.managerRequest = ManagerRequest.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.managerResponse = ManagerResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IpcMessage {
    return {
      extensionRequest: isSet(object.extensionRequest)
        ? QualifiedExtensionRequest.fromJSON(object.extensionRequest)
        : undefined,
      extensionResponse: isSet(object.extensionResponse)
        ? QualifiedExtensionResponse.fromJSON(object.extensionResponse)
        : undefined,
      extensionEvent: isSet(object.extensionEvent)
        ? QualifiedExtensionEvent.fromJSON(object.extensionEvent)
        : undefined,
      managerRequest: isSet(object.managerRequest) ? ManagerRequest.fromJSON(object.managerRequest) : undefined,
      managerResponse: isSet(object.managerResponse) ? ManagerResponse.fromJSON(object.managerResponse) : undefined,
    };
  },

  toJSON(message: IpcMessage): unknown {
    const obj: any = {};
    if (message.extensionRequest !== undefined) {
      obj.extensionRequest = QualifiedExtensionRequest.toJSON(message.extensionRequest);
    }
    if (message.extensionResponse !== undefined) {
      obj.extensionResponse = QualifiedExtensionResponse.toJSON(message.extensionResponse);
    }
    if (message.extensionEvent !== undefined) {
      obj.extensionEvent = QualifiedExtensionEvent.toJSON(message.extensionEvent);
    }
    if (message.managerRequest !== undefined) {
      obj.managerRequest = ManagerRequest.toJSON(message.managerRequest);
    }
    if (message.managerResponse !== undefined) {
      obj.managerResponse = ManagerResponse.toJSON(message.managerResponse);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IpcMessage>, I>>(base?: I): IpcMessage {
    return IpcMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IpcMessage>, I>>(object: I): IpcMessage {
    const message = createBaseIpcMessage();
    message.extensionRequest = (object.extensionRequest !== undefined && object.extensionRequest !== null)
      ? QualifiedExtensionRequest.fromPartial(object.extensionRequest)
      : undefined;
    message.extensionResponse = (object.extensionResponse !== undefined && object.extensionResponse !== null)
      ? QualifiedExtensionResponse.fromPartial(object.extensionResponse)
      : undefined;
    message.extensionEvent = (object.extensionEvent !== undefined && object.extensionEvent !== null)
      ? QualifiedExtensionEvent.fromPartial(object.extensionEvent)
      : undefined;
    message.managerRequest = (object.managerRequest !== undefined && object.managerRequest !== null)
      ? ManagerRequest.fromPartial(object.managerRequest)
      : undefined;
    message.managerResponse = (object.managerResponse !== undefined && object.managerResponse !== null)
      ? ManagerResponse.fromPartial(object.managerResponse)
      : undefined;
    return message;
  },
};

function createBaseErrorResponseData(): ErrorResponseData {
  return { errorText: "" };
}

export const ErrorResponseData: MessageFns<ErrorResponseData> = {
  encode(message: ErrorResponseData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.errorText !== "") {
      writer.uint32(10).string(message.errorText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.errorText = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorResponseData {
    return { errorText: isSet(object.errorText) ? globalThis.String(object.errorText) : "" };
  },

  toJSON(message: ErrorResponseData): unknown {
    const obj: any = {};
    if (message.errorText !== "") {
      obj.errorText = message.errorText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ErrorResponseData>, I>>(base?: I): ErrorResponseData {
    return ErrorResponseData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ErrorResponseData>, I>>(object: I): ErrorResponseData {
    const message = createBaseErrorResponseData();
    message.errorText = object.errorText ?? "";
    return message;
  },
};

function createBaseManagerRequestData(): ManagerRequestData {
  return { listExtensions: undefined };
}

export const ManagerRequestData: MessageFns<ManagerRequestData> = {
  encode(message: ManagerRequestData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.listExtensions !== undefined) {
      ListExtensionsRequest.encode(message.listExtensions, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagerRequestData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagerRequestData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.listExtensions = ListExtensionsRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagerRequestData {
    return {
      listExtensions: isSet(object.listExtensions) ? ListExtensionsRequest.fromJSON(object.listExtensions) : undefined,
    };
  },

  toJSON(message: ManagerRequestData): unknown {
    const obj: any = {};
    if (message.listExtensions !== undefined) {
      obj.listExtensions = ListExtensionsRequest.toJSON(message.listExtensions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagerRequestData>, I>>(base?: I): ManagerRequestData {
    return ManagerRequestData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagerRequestData>, I>>(object: I): ManagerRequestData {
    const message = createBaseManagerRequestData();
    message.listExtensions = (object.listExtensions !== undefined && object.listExtensions !== null)
      ? ListExtensionsRequest.fromPartial(object.listExtensions)
      : undefined;
    return message;
  },
};

function createBaseManagerRequest(): ManagerRequest {
  return { requestId: "", payload: undefined };
}

export const ManagerRequest: MessageFns<ManagerRequest> = {
  encode(message: ManagerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.payload !== undefined) {
      ManagerRequestData.encode(message.payload, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = ManagerRequestData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagerRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      payload: isSet(object.payload) ? ManagerRequestData.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: ManagerRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.payload !== undefined) {
      obj.payload = ManagerRequestData.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagerRequest>, I>>(base?: I): ManagerRequest {
    return ManagerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagerRequest>, I>>(object: I): ManagerRequest {
    const message = createBaseManagerRequest();
    message.requestId = object.requestId ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? ManagerRequestData.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseManagerResponseData(): ManagerResponseData {
  return { ack: undefined, extensionList: undefined, error: undefined };
}

export const ManagerResponseData: MessageFns<ManagerResponseData> = {
  encode(message: ManagerResponseData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ack !== undefined) {
      AckResponse.encode(message.ack, writer.uint32(10).fork()).join();
    }
    if (message.extensionList !== undefined) {
      ListExtensionsResponse.encode(message.extensionList, writer.uint32(18).fork()).join();
    }
    if (message.error !== undefined) {
      ErrorResponseData.encode(message.error, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagerResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagerResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ack = AckResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.extensionList = ListExtensionsResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = ErrorResponseData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagerResponseData {
    return {
      ack: isSet(object.ack) ? AckResponse.fromJSON(object.ack) : undefined,
      extensionList: isSet(object.extensionList) ? ListExtensionsResponse.fromJSON(object.extensionList) : undefined,
      error: isSet(object.error) ? ErrorResponseData.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ManagerResponseData): unknown {
    const obj: any = {};
    if (message.ack !== undefined) {
      obj.ack = AckResponse.toJSON(message.ack);
    }
    if (message.extensionList !== undefined) {
      obj.extensionList = ListExtensionsResponse.toJSON(message.extensionList);
    }
    if (message.error !== undefined) {
      obj.error = ErrorResponseData.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagerResponseData>, I>>(base?: I): ManagerResponseData {
    return ManagerResponseData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagerResponseData>, I>>(object: I): ManagerResponseData {
    const message = createBaseManagerResponseData();
    message.ack = (object.ack !== undefined && object.ack !== null) ? AckResponse.fromPartial(object.ack) : undefined;
    message.extensionList = (object.extensionList !== undefined && object.extensionList !== null)
      ? ListExtensionsResponse.fromPartial(object.extensionList)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? ErrorResponseData.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseManagerResponse(): ManagerResponse {
  return { requestId: "", payload: undefined };
}

export const ManagerResponse: MessageFns<ManagerResponse> = {
  encode(message: ManagerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.payload !== undefined) {
      ManagerResponseData.encode(message.payload, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = ManagerResponseData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagerResponse {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      payload: isSet(object.payload) ? ManagerResponseData.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: ManagerResponse): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.payload !== undefined) {
      obj.payload = ManagerResponseData.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagerResponse>, I>>(base?: I): ManagerResponse {
    return ManagerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagerResponse>, I>>(object: I): ManagerResponse {
    const message = createBaseManagerResponse();
    message.requestId = object.requestId ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? ManagerResponseData.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseListExtensionsRequest(): ListExtensionsRequest {
  return {};
}

export const ListExtensionsRequest: MessageFns<ListExtensionsRequest> = {
  encode(_: ListExtensionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExtensionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExtensionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListExtensionsRequest {
    return {};
  },

  toJSON(_: ListExtensionsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListExtensionsRequest>, I>>(base?: I): ListExtensionsRequest {
    return ListExtensionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListExtensionsRequest>, I>>(_: I): ListExtensionsRequest {
    const message = createBaseListExtensionsRequest();
    return message;
  },
};

function createBaseListExtensionsResponse(): ListExtensionsResponse {
  return { extensionList: [] };
}

export const ListExtensionsResponse: MessageFns<ListExtensionsResponse> = {
  encode(message: ListExtensionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.extensionList) {
      ExtensionInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExtensionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExtensionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.extensionList.push(ExtensionInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExtensionsResponse {
    return {
      extensionList: globalThis.Array.isArray(object?.extensionList)
        ? object.extensionList.map((e: any) => ExtensionInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListExtensionsResponse): unknown {
    const obj: any = {};
    if (message.extensionList?.length) {
      obj.extensionList = message.extensionList.map((e) => ExtensionInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListExtensionsResponse>, I>>(base?: I): ListExtensionsResponse {
    return ListExtensionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListExtensionsResponse>, I>>(object: I): ListExtensionsResponse {
    const message = createBaseListExtensionsResponse();
    message.extensionList = object.extensionList?.map((e) => ExtensionInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCommandArgument(): CommandArgument {
  return { name: "", type: "", isRequired: false, placeholder: "" };
}

export const CommandArgument: MessageFns<CommandArgument> = {
  encode(message: CommandArgument, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.isRequired !== false) {
      writer.uint32(24).bool(message.isRequired);
    }
    if (message.placeholder !== "") {
      writer.uint32(34).string(message.placeholder);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandArgument {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandArgument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isRequired = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.placeholder = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandArgument {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      isRequired: isSet(object.isRequired) ? globalThis.Boolean(object.isRequired) : false,
      placeholder: isSet(object.placeholder) ? globalThis.String(object.placeholder) : "",
    };
  },

  toJSON(message: CommandArgument): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.isRequired !== false) {
      obj.isRequired = message.isRequired;
    }
    if (message.placeholder !== "") {
      obj.placeholder = message.placeholder;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandArgument>, I>>(base?: I): CommandArgument {
    return CommandArgument.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandArgument>, I>>(object: I): CommandArgument {
    const message = createBaseCommandArgument();
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    message.isRequired = object.isRequired ?? false;
    message.placeholder = object.placeholder ?? "";
    return message;
  },
};

function createBaseExtensionInfo(): ExtensionInfo {
  return { manifest: undefined };
}

export const ExtensionInfo: MessageFns<ExtensionInfo> = {
  encode(message: ExtensionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.manifest !== undefined) {
      ExtensionManifest.encode(message.manifest, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.manifest = ExtensionManifest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionInfo {
    return { manifest: isSet(object.manifest) ? ExtensionManifest.fromJSON(object.manifest) : undefined };
  },

  toJSON(message: ExtensionInfo): unknown {
    const obj: any = {};
    if (message.manifest !== undefined) {
      obj.manifest = ExtensionManifest.toJSON(message.manifest);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtensionInfo>, I>>(base?: I): ExtensionInfo {
    return ExtensionInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtensionInfo>, I>>(object: I): ExtensionInfo {
    const message = createBaseExtensionInfo();
    message.manifest = (object.manifest !== undefined && object.manifest !== null)
      ? ExtensionManifest.fromPartial(object.manifest)
      : undefined;
    return message;
  },
};

function createBaseExtensionManifest(): ExtensionManifest {
  return { id: "", name: "", description: "", categories: [], author: "", icon: "", commands: [], preferences: [] };
}

export const ExtensionManifest: MessageFns<ExtensionManifest> = {
  encode(message: ExtensionManifest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.categories) {
      writer.uint32(34).string(v!);
    }
    if (message.author !== "") {
      writer.uint32(42).string(message.author);
    }
    if (message.icon !== "") {
      writer.uint32(50).string(message.icon);
    }
    for (const v of message.commands) {
      CommandManifest.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.preferences) {
      Preference.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionManifest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionManifest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.categories.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.author = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.commands.push(CommandManifest.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.preferences.push(Preference.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionManifest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      categories: globalThis.Array.isArray(object?.categories)
        ? object.categories.map((e: any) => globalThis.String(e))
        : [],
      author: isSet(object.author) ? globalThis.String(object.author) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      commands: globalThis.Array.isArray(object?.commands)
        ? object.commands.map((e: any) => CommandManifest.fromJSON(e))
        : [],
      preferences: globalThis.Array.isArray(object?.preferences)
        ? object.preferences.map((e: any) => Preference.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ExtensionManifest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.categories?.length) {
      obj.categories = message.categories;
    }
    if (message.author !== "") {
      obj.author = message.author;
    }
    if (message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.commands?.length) {
      obj.commands = message.commands.map((e) => CommandManifest.toJSON(e));
    }
    if (message.preferences?.length) {
      obj.preferences = message.preferences.map((e) => Preference.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtensionManifest>, I>>(base?: I): ExtensionManifest {
    return ExtensionManifest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtensionManifest>, I>>(object: I): ExtensionManifest {
    const message = createBaseExtensionManifest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.categories = object.categories?.map((e) => e) || [];
    message.author = object.author ?? "";
    message.icon = object.icon ?? "";
    message.commands = object.commands?.map((e) => CommandManifest.fromPartial(e)) || [];
    message.preferences = object.preferences?.map((e) => Preference.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCommandManifest(): CommandManifest {
  return { id: "", title: "", description: "", mode: "", preferences: [], arguments: [] };
}

export const CommandManifest: MessageFns<CommandManifest> = {
  encode(message: CommandManifest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.mode !== "") {
      writer.uint32(34).string(message.mode);
    }
    for (const v of message.preferences) {
      Preference.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.arguments) {
      CommandArgument.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandManifest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandManifest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.mode = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.preferences.push(Preference.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.arguments.push(CommandArgument.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandManifest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      mode: isSet(object.mode) ? globalThis.String(object.mode) : "",
      preferences: globalThis.Array.isArray(object?.preferences)
        ? object.preferences.map((e: any) => Preference.fromJSON(e))
        : [],
      arguments: globalThis.Array.isArray(object?.arguments)
        ? object.arguments.map((e: any) => CommandArgument.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CommandManifest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.mode !== "") {
      obj.mode = message.mode;
    }
    if (message.preferences?.length) {
      obj.preferences = message.preferences.map((e) => Preference.toJSON(e));
    }
    if (message.arguments?.length) {
      obj.arguments = message.arguments.map((e) => CommandArgument.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandManifest>, I>>(base?: I): CommandManifest {
    return CommandManifest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandManifest>, I>>(object: I): CommandManifest {
    const message = createBaseCommandManifest();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.mode = object.mode ?? "";
    message.preferences = object.preferences?.map((e) => Preference.fromPartial(e)) || [];
    message.arguments = object.arguments?.map((e) => CommandArgument.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQualifiedExtensionRequest(): QualifiedExtensionRequest {
  return { requestId: "", sessionId: "", request: undefined };
}

export const QualifiedExtensionRequest: MessageFns<QualifiedExtensionRequest> = {
  encode(message: QualifiedExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.sessionId !== "") {
      writer.uint32(18).string(message.sessionId);
    }
    if (message.request !== undefined) {
      ExtensionRequestData.encode(message.request, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QualifiedExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQualifiedExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.request = ExtensionRequestData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QualifiedExtensionRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      request: isSet(object.request) ? ExtensionRequestData.fromJSON(object.request) : undefined,
    };
  },

  toJSON(message: QualifiedExtensionRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.request !== undefined) {
      obj.request = ExtensionRequestData.toJSON(message.request);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QualifiedExtensionRequest>, I>>(base?: I): QualifiedExtensionRequest {
    return QualifiedExtensionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QualifiedExtensionRequest>, I>>(object: I): QualifiedExtensionRequest {
    const message = createBaseQualifiedExtensionRequest();
    message.requestId = object.requestId ?? "";
    message.sessionId = object.sessionId ?? "";
    message.request = (object.request !== undefined && object.request !== null)
      ? ExtensionRequestData.fromPartial(object.request)
      : undefined;
    return message;
  },
};

function createBaseQualifiedExtensionResponse(): QualifiedExtensionResponse {
  return { requestId: "", sessionId: "", response: undefined };
}

export const QualifiedExtensionResponse: MessageFns<QualifiedExtensionResponse> = {
  encode(message: QualifiedExtensionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.sessionId !== "") {
      writer.uint32(18).string(message.sessionId);
    }
    if (message.response !== undefined) {
      ExtensionResponse.encode(message.response, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QualifiedExtensionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQualifiedExtensionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.response = ExtensionResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QualifiedExtensionResponse {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      response: isSet(object.response) ? ExtensionResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: QualifiedExtensionResponse): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.response !== undefined) {
      obj.response = ExtensionResponse.toJSON(message.response);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QualifiedExtensionResponse>, I>>(base?: I): QualifiedExtensionResponse {
    return QualifiedExtensionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QualifiedExtensionResponse>, I>>(object: I): QualifiedExtensionResponse {
    const message = createBaseQualifiedExtensionResponse();
    message.requestId = object.requestId ?? "";
    message.sessionId = object.sessionId ?? "";
    message.response = (object.response !== undefined && object.response !== null)
      ? ExtensionResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseQualifiedExtensionEvent(): QualifiedExtensionEvent {
  return { id: "", sessionId: "" };
}

export const QualifiedExtensionEvent: MessageFns<QualifiedExtensionEvent> = {
  encode(message: QualifiedExtensionEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.sessionId !== "") {
      writer.uint32(18).string(message.sessionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QualifiedExtensionEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQualifiedExtensionEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QualifiedExtensionEvent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
    };
  },

  toJSON(message: QualifiedExtensionEvent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QualifiedExtensionEvent>, I>>(base?: I): QualifiedExtensionEvent {
    return QualifiedExtensionEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QualifiedExtensionEvent>, I>>(object: I): QualifiedExtensionEvent {
    const message = createBaseQualifiedExtensionEvent();
    message.id = object.id ?? "";
    message.sessionId = object.sessionId ?? "";
    return message;
  },
};

function createBaseAckResponse(): AckResponse {
  return {};
}

export const AckResponse: MessageFns<AckResponse> = {
  encode(_: AckResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AckResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAckResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AckResponse {
    return {};
  },

  toJSON(_: AckResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<AckResponse>, I>>(base?: I): AckResponse {
    return AckResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AckResponse>, I>>(_: I): AckResponse {
    const message = createBaseAckResponse();
    return message;
  },
};

function createBaseExtensionResponse(): ExtensionResponse {
  return { requestId: "", data: undefined, error: undefined };
}

export const ExtensionResponse: MessageFns<ExtensionResponse> = {
  encode(message: ExtensionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.data !== undefined) {
      ExtensionResponseData.encode(message.data, writer.uint32(18).fork()).join();
    }
    if (message.error !== undefined) {
      ErrorResponseData.encode(message.error, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = ExtensionResponseData.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = ErrorResponseData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionResponse {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      data: isSet(object.data) ? ExtensionResponseData.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? ErrorResponseData.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ExtensionResponse): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.data !== undefined) {
      obj.data = ExtensionResponseData.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = ErrorResponseData.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtensionResponse>, I>>(base?: I): ExtensionResponse {
    return ExtensionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtensionResponse>, I>>(object: I): ExtensionResponse {
    const message = createBaseExtensionResponse();
    message.requestId = object.requestId ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? ExtensionResponseData.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? ErrorResponseData.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseExtensionResponseData(): ExtensionResponseData {
  return { ack: undefined, listApplications: undefined, error: undefined };
}

export const ExtensionResponseData: MessageFns<ExtensionResponseData> = {
  encode(message: ExtensionResponseData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ack !== undefined) {
      AckResponse.encode(message.ack, writer.uint32(10).fork()).join();
    }
    if (message.listApplications !== undefined) {
      ListApplicationResponse.encode(message.listApplications, writer.uint32(18).fork()).join();
    }
    if (message.error !== undefined) {
      ErrorResponseData.encode(message.error, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ack = AckResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.listApplications = ListApplicationResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = ErrorResponseData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionResponseData {
    return {
      ack: isSet(object.ack) ? AckResponse.fromJSON(object.ack) : undefined,
      listApplications: isSet(object.listApplications)
        ? ListApplicationResponse.fromJSON(object.listApplications)
        : undefined,
      error: isSet(object.error) ? ErrorResponseData.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ExtensionResponseData): unknown {
    const obj: any = {};
    if (message.ack !== undefined) {
      obj.ack = AckResponse.toJSON(message.ack);
    }
    if (message.listApplications !== undefined) {
      obj.listApplications = ListApplicationResponse.toJSON(message.listApplications);
    }
    if (message.error !== undefined) {
      obj.error = ErrorResponseData.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtensionResponseData>, I>>(base?: I): ExtensionResponseData {
    return ExtensionResponseData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtensionResponseData>, I>>(object: I): ExtensionResponseData {
    const message = createBaseExtensionResponseData();
    message.ack = (object.ack !== undefined && object.ack !== null) ? AckResponse.fromPartial(object.ack) : undefined;
    message.listApplications = (object.listApplications !== undefined && object.listApplications !== null)
      ? ListApplicationResponse.fromPartial(object.listApplications)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? ErrorResponseData.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseExtensionEvent(): ExtensionEvent {
  return { id: "", args: [] };
}

export const ExtensionEvent: MessageFns<ExtensionEvent> = {
  encode(message: ExtensionEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.args) {
      Any.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.args.push(Any.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionEvent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      args: globalThis.Array.isArray(object?.args) ? object.args.map((e: any) => Any.fromJSON(e)) : [],
    };
  },

  toJSON(message: ExtensionEvent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.args?.length) {
      obj.args = message.args.map((e) => Any.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtensionEvent>, I>>(base?: I): ExtensionEvent {
    return ExtensionEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtensionEvent>, I>>(object: I): ExtensionEvent {
    const message = createBaseExtensionEvent();
    message.id = object.id ?? "";
    message.args = object.args?.map((e) => Any.fromPartial(e)) || [];
    return message;
  },
};

function createBaseExtensionMessage(): ExtensionMessage {
  return { request: undefined, response: undefined, event: undefined };
}

export const ExtensionMessage: MessageFns<ExtensionMessage> = {
  encode(message: ExtensionMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.request !== undefined) {
      ExtensionRequest.encode(message.request, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      ExtensionResponse.encode(message.response, writer.uint32(18).fork()).join();
    }
    if (message.event !== undefined) {
      ExtensionEvent.encode(message.event, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.request = ExtensionRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.response = ExtensionResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.event = ExtensionEvent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionMessage {
    return {
      request: isSet(object.request) ? ExtensionRequest.fromJSON(object.request) : undefined,
      response: isSet(object.response) ? ExtensionResponse.fromJSON(object.response) : undefined,
      event: isSet(object.event) ? ExtensionEvent.fromJSON(object.event) : undefined,
    };
  },

  toJSON(message: ExtensionMessage): unknown {
    const obj: any = {};
    if (message.request !== undefined) {
      obj.request = ExtensionRequest.toJSON(message.request);
    }
    if (message.response !== undefined) {
      obj.response = ExtensionResponse.toJSON(message.response);
    }
    if (message.event !== undefined) {
      obj.event = ExtensionEvent.toJSON(message.event);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtensionMessage>, I>>(base?: I): ExtensionMessage {
    return ExtensionMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtensionMessage>, I>>(object: I): ExtensionMessage {
    const message = createBaseExtensionMessage();
    message.request = (object.request !== undefined && object.request !== null)
      ? ExtensionRequest.fromPartial(object.request)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? ExtensionResponse.fromPartial(object.response)
      : undefined;
    message.event = (object.event !== undefined && object.event !== null)
      ? ExtensionEvent.fromPartial(object.event)
      : undefined;
    return message;
  },
};

function createBaseExtensionRequest(): ExtensionRequest {
  return { requestId: "", data: undefined };
}

export const ExtensionRequest: MessageFns<ExtensionRequest> = {
  encode(message: ExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.data !== undefined) {
      ExtensionRequestData.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = ExtensionRequestData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      data: isSet(object.data) ? ExtensionRequestData.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: ExtensionRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.data !== undefined) {
      obj.data = ExtensionRequestData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtensionRequest>, I>>(base?: I): ExtensionRequest {
    return ExtensionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtensionRequest>, I>>(object: I): ExtensionRequest {
    const message = createBaseExtensionRequest();
    message.requestId = object.requestId ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? ExtensionRequestData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseExtensionRequestData(): ExtensionRequestData {
  return {
    render: undefined,
    listApps: undefined,
    openApps: undefined,
    showToast: undefined,
    clipboardCopy: undefined,
    pushView: undefined,
    popView: undefined,
    clearSearch: undefined,
    closeMainWindow: undefined,
    showHud: undefined,
  };
}

export const ExtensionRequestData: MessageFns<ExtensionRequestData> = {
  encode(message: ExtensionRequestData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.render !== undefined) {
      RenderRequest.encode(message.render, writer.uint32(10).fork()).join();
    }
    if (message.listApps !== undefined) {
      ListApplicationRequest.encode(message.listApps, writer.uint32(18).fork()).join();
    }
    if (message.openApps !== undefined) {
      OpenApplicationRequest.encode(message.openApps, writer.uint32(26).fork()).join();
    }
    if (message.showToast !== undefined) {
      ShowToastRequest.encode(message.showToast, writer.uint32(34).fork()).join();
    }
    if (message.clipboardCopy !== undefined) {
      CopyToClipboardRequest.encode(message.clipboardCopy, writer.uint32(42).fork()).join();
    }
    if (message.pushView !== undefined) {
      PushViewRequest.encode(message.pushView, writer.uint32(50).fork()).join();
    }
    if (message.popView !== undefined) {
      PopViewRequest.encode(message.popView, writer.uint32(58).fork()).join();
    }
    if (message.clearSearch !== undefined) {
      ClearSearchBarRequest.encode(message.clearSearch, writer.uint32(66).fork()).join();
    }
    if (message.closeMainWindow !== undefined) {
      CloseMainWindowRequest.encode(message.closeMainWindow, writer.uint32(74).fork()).join();
    }
    if (message.showHud !== undefined) {
      ShowHudRequest.encode(message.showHud, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionRequestData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionRequestData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.render = RenderRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.listApps = ListApplicationRequest.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.openApps = OpenApplicationRequest.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.showToast = ShowToastRequest.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.clipboardCopy = CopyToClipboardRequest.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.pushView = PushViewRequest.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.popView = PopViewRequest.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.clearSearch = ClearSearchBarRequest.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.closeMainWindow = CloseMainWindowRequest.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.showHud = ShowHudRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionRequestData {
    return {
      render: isSet(object.render) ? RenderRequest.fromJSON(object.render) : undefined,
      listApps: isSet(object.listApps) ? ListApplicationRequest.fromJSON(object.listApps) : undefined,
      openApps: isSet(object.openApps) ? OpenApplicationRequest.fromJSON(object.openApps) : undefined,
      showToast: isSet(object.showToast) ? ShowToastRequest.fromJSON(object.showToast) : undefined,
      clipboardCopy: isSet(object.clipboardCopy) ? CopyToClipboardRequest.fromJSON(object.clipboardCopy) : undefined,
      pushView: isSet(object.pushView) ? PushViewRequest.fromJSON(object.pushView) : undefined,
      popView: isSet(object.popView) ? PopViewRequest.fromJSON(object.popView) : undefined,
      clearSearch: isSet(object.clearSearch) ? ClearSearchBarRequest.fromJSON(object.clearSearch) : undefined,
      closeMainWindow: isSet(object.closeMainWindow)
        ? CloseMainWindowRequest.fromJSON(object.closeMainWindow)
        : undefined,
      showHud: isSet(object.showHud) ? ShowHudRequest.fromJSON(object.showHud) : undefined,
    };
  },

  toJSON(message: ExtensionRequestData): unknown {
    const obj: any = {};
    if (message.render !== undefined) {
      obj.render = RenderRequest.toJSON(message.render);
    }
    if (message.listApps !== undefined) {
      obj.listApps = ListApplicationRequest.toJSON(message.listApps);
    }
    if (message.openApps !== undefined) {
      obj.openApps = OpenApplicationRequest.toJSON(message.openApps);
    }
    if (message.showToast !== undefined) {
      obj.showToast = ShowToastRequest.toJSON(message.showToast);
    }
    if (message.clipboardCopy !== undefined) {
      obj.clipboardCopy = CopyToClipboardRequest.toJSON(message.clipboardCopy);
    }
    if (message.pushView !== undefined) {
      obj.pushView = PushViewRequest.toJSON(message.pushView);
    }
    if (message.popView !== undefined) {
      obj.popView = PopViewRequest.toJSON(message.popView);
    }
    if (message.clearSearch !== undefined) {
      obj.clearSearch = ClearSearchBarRequest.toJSON(message.clearSearch);
    }
    if (message.closeMainWindow !== undefined) {
      obj.closeMainWindow = CloseMainWindowRequest.toJSON(message.closeMainWindow);
    }
    if (message.showHud !== undefined) {
      obj.showHud = ShowHudRequest.toJSON(message.showHud);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtensionRequestData>, I>>(base?: I): ExtensionRequestData {
    return ExtensionRequestData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtensionRequestData>, I>>(object: I): ExtensionRequestData {
    const message = createBaseExtensionRequestData();
    message.render = (object.render !== undefined && object.render !== null)
      ? RenderRequest.fromPartial(object.render)
      : undefined;
    message.listApps = (object.listApps !== undefined && object.listApps !== null)
      ? ListApplicationRequest.fromPartial(object.listApps)
      : undefined;
    message.openApps = (object.openApps !== undefined && object.openApps !== null)
      ? OpenApplicationRequest.fromPartial(object.openApps)
      : undefined;
    message.showToast = (object.showToast !== undefined && object.showToast !== null)
      ? ShowToastRequest.fromPartial(object.showToast)
      : undefined;
    message.clipboardCopy = (object.clipboardCopy !== undefined && object.clipboardCopy !== null)
      ? CopyToClipboardRequest.fromPartial(object.clipboardCopy)
      : undefined;
    message.pushView = (object.pushView !== undefined && object.pushView !== null)
      ? PushViewRequest.fromPartial(object.pushView)
      : undefined;
    message.popView = (object.popView !== undefined && object.popView !== null)
      ? PopViewRequest.fromPartial(object.popView)
      : undefined;
    message.clearSearch = (object.clearSearch !== undefined && object.clearSearch !== null)
      ? ClearSearchBarRequest.fromPartial(object.clearSearch)
      : undefined;
    message.closeMainWindow = (object.closeMainWindow !== undefined && object.closeMainWindow !== null)
      ? CloseMainWindowRequest.fromPartial(object.closeMainWindow)
      : undefined;
    message.showHud = (object.showHud !== undefined && object.showHud !== null)
      ? ShowHudRequest.fromPartial(object.showHud)
      : undefined;
    return message;
  },
};

function createBaseApplication(): Application {
  return { id: "", name: "", icon: "" };
}

export const Application: MessageFns<Application> = {
  encode(message: Application, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.icon !== "") {
      writer.uint32(26).string(message.icon);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Application {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Application {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
    };
  },

  toJSON(message: Application): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.icon !== "") {
      obj.icon = message.icon;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Application>, I>>(base?: I): Application {
    return Application.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Application>, I>>(object: I): Application {
    const message = createBaseApplication();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.icon = object.icon ?? "";
    return message;
  },
};

function createBaseShowToastRequest(): ShowToastRequest {
  return { title: "", style: "" };
}

export const ShowToastRequest: MessageFns<ShowToastRequest> = {
  encode(message: ShowToastRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.style !== "") {
      writer.uint32(18).string(message.style);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShowToastRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShowToastRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.style = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShowToastRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      style: isSet(object.style) ? globalThis.String(object.style) : "",
    };
  },

  toJSON(message: ShowToastRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.style !== "") {
      obj.style = message.style;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShowToastRequest>, I>>(base?: I): ShowToastRequest {
    return ShowToastRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShowToastRequest>, I>>(object: I): ShowToastRequest {
    const message = createBaseShowToastRequest();
    message.title = object.title ?? "";
    message.style = object.style ?? "";
    return message;
  },
};

function createBasePushViewRequest(): PushViewRequest {
  return {};
}

export const PushViewRequest: MessageFns<PushViewRequest> = {
  encode(_: PushViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PushViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePushViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PushViewRequest {
    return {};
  },

  toJSON(_: PushViewRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PushViewRequest>, I>>(base?: I): PushViewRequest {
    return PushViewRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PushViewRequest>, I>>(_: I): PushViewRequest {
    const message = createBasePushViewRequest();
    return message;
  },
};

function createBasePopViewRequest(): PopViewRequest {
  return {};
}

export const PopViewRequest: MessageFns<PopViewRequest> = {
  encode(_: PopViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PopViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePopViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PopViewRequest {
    return {};
  },

  toJSON(_: PopViewRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PopViewRequest>, I>>(base?: I): PopViewRequest {
    return PopViewRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PopViewRequest>, I>>(_: I): PopViewRequest {
    const message = createBasePopViewRequest();
    return message;
  },
};

function createBaseCloseMainWindowRequest(): CloseMainWindowRequest {
  return {};
}

export const CloseMainWindowRequest: MessageFns<CloseMainWindowRequest> = {
  encode(_: CloseMainWindowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloseMainWindowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloseMainWindowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CloseMainWindowRequest {
    return {};
  },

  toJSON(_: CloseMainWindowRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CloseMainWindowRequest>, I>>(base?: I): CloseMainWindowRequest {
    return CloseMainWindowRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CloseMainWindowRequest>, I>>(_: I): CloseMainWindowRequest {
    const message = createBaseCloseMainWindowRequest();
    return message;
  },
};

function createBaseClearSearchBarRequest(): ClearSearchBarRequest {
  return {};
}

export const ClearSearchBarRequest: MessageFns<ClearSearchBarRequest> = {
  encode(_: ClearSearchBarRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClearSearchBarRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearSearchBarRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClearSearchBarRequest {
    return {};
  },

  toJSON(_: ClearSearchBarRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClearSearchBarRequest>, I>>(base?: I): ClearSearchBarRequest {
    return ClearSearchBarRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClearSearchBarRequest>, I>>(_: I): ClearSearchBarRequest {
    const message = createBaseClearSearchBarRequest();
    return message;
  },
};

function createBaseShowHudRequest(): ShowHudRequest {
  return { text: "" };
}

export const ShowHudRequest: MessageFns<ShowHudRequest> = {
  encode(message: ShowHudRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShowHudRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShowHudRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShowHudRequest {
    return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
  },

  toJSON(message: ShowHudRequest): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShowHudRequest>, I>>(base?: I): ShowHudRequest {
    return ShowHudRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShowHudRequest>, I>>(object: I): ShowHudRequest {
    const message = createBaseShowHudRequest();
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseClipboardHtmlContent(): ClipboardHtmlContent {
  return { html: "", text: "" };
}

export const ClipboardHtmlContent: MessageFns<ClipboardHtmlContent> = {
  encode(message: ClipboardHtmlContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.html !== "") {
      writer.uint32(10).string(message.html);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClipboardHtmlContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClipboardHtmlContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.html = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClipboardHtmlContent {
    return {
      html: isSet(object.html) ? globalThis.String(object.html) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
    };
  },

  toJSON(message: ClipboardHtmlContent): unknown {
    const obj: any = {};
    if (message.html !== "") {
      obj.html = message.html;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClipboardHtmlContent>, I>>(base?: I): ClipboardHtmlContent {
    return ClipboardHtmlContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClipboardHtmlContent>, I>>(object: I): ClipboardHtmlContent {
    const message = createBaseClipboardHtmlContent();
    message.html = object.html ?? "";
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseClipboardPathContent(): ClipboardPathContent {
  return { path: "" };
}

export const ClipboardPathContent: MessageFns<ClipboardPathContent> = {
  encode(message: ClipboardPathContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClipboardPathContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClipboardPathContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClipboardPathContent {
    return { path: isSet(object.path) ? globalThis.String(object.path) : "" };
  },

  toJSON(message: ClipboardPathContent): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClipboardPathContent>, I>>(base?: I): ClipboardPathContent {
    return ClipboardPathContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClipboardPathContent>, I>>(object: I): ClipboardPathContent {
    const message = createBaseClipboardPathContent();
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseClipboardOptions(): ClipboardOptions {
  return { concealed: false };
}

export const ClipboardOptions: MessageFns<ClipboardOptions> = {
  encode(message: ClipboardOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.concealed !== false) {
      writer.uint32(8).bool(message.concealed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClipboardOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClipboardOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.concealed = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClipboardOptions {
    return { concealed: isSet(object.concealed) ? globalThis.Boolean(object.concealed) : false };
  },

  toJSON(message: ClipboardOptions): unknown {
    const obj: any = {};
    if (message.concealed !== false) {
      obj.concealed = message.concealed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClipboardOptions>, I>>(base?: I): ClipboardOptions {
    return ClipboardOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClipboardOptions>, I>>(object: I): ClipboardOptions {
    const message = createBaseClipboardOptions();
    message.concealed = object.concealed ?? false;
    return message;
  },
};

function createBaseCopyToClipboardRequest(): CopyToClipboardRequest {
  return { options: undefined, text: undefined, html: undefined, path: undefined };
}

export const CopyToClipboardRequest: MessageFns<CopyToClipboardRequest> = {
  encode(message: CopyToClipboardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.options !== undefined) {
      ClipboardOptions.encode(message.options, writer.uint32(10).fork()).join();
    }
    if (message.text !== undefined) {
      writer.uint32(18).string(message.text);
    }
    if (message.html !== undefined) {
      ClipboardHtmlContent.encode(message.html, writer.uint32(26).fork()).join();
    }
    if (message.path !== undefined) {
      ClipboardPathContent.encode(message.path, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CopyToClipboardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCopyToClipboardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.options = ClipboardOptions.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.html = ClipboardHtmlContent.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.path = ClipboardPathContent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CopyToClipboardRequest {
    return {
      options: isSet(object.options) ? ClipboardOptions.fromJSON(object.options) : undefined,
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      html: isSet(object.html) ? ClipboardHtmlContent.fromJSON(object.html) : undefined,
      path: isSet(object.path) ? ClipboardPathContent.fromJSON(object.path) : undefined,
    };
  },

  toJSON(message: CopyToClipboardRequest): unknown {
    const obj: any = {};
    if (message.options !== undefined) {
      obj.options = ClipboardOptions.toJSON(message.options);
    }
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.html !== undefined) {
      obj.html = ClipboardHtmlContent.toJSON(message.html);
    }
    if (message.path !== undefined) {
      obj.path = ClipboardPathContent.toJSON(message.path);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CopyToClipboardRequest>, I>>(base?: I): CopyToClipboardRequest {
    return CopyToClipboardRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CopyToClipboardRequest>, I>>(object: I): CopyToClipboardRequest {
    const message = createBaseCopyToClipboardRequest();
    message.options = (object.options !== undefined && object.options !== null)
      ? ClipboardOptions.fromPartial(object.options)
      : undefined;
    message.text = object.text ?? undefined;
    message.html = (object.html !== undefined && object.html !== null)
      ? ClipboardHtmlContent.fromPartial(object.html)
      : undefined;
    message.path = (object.path !== undefined && object.path !== null)
      ? ClipboardPathContent.fromPartial(object.path)
      : undefined;
    return message;
  },
};

function createBaseOpenApplicationRequest(): OpenApplicationRequest {
  return { target: "", appId: undefined };
}

export const OpenApplicationRequest: MessageFns<OpenApplicationRequest> = {
  encode(message: OpenApplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.target !== "") {
      writer.uint32(10).string(message.target);
    }
    if (message.appId !== undefined) {
      writer.uint32(18).string(message.appId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenApplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenApplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.target = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenApplicationRequest {
    return {
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      appId: isSet(object.appId) ? globalThis.String(object.appId) : undefined,
    };
  },

  toJSON(message: OpenApplicationRequest): unknown {
    const obj: any = {};
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.appId !== undefined) {
      obj.appId = message.appId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OpenApplicationRequest>, I>>(base?: I): OpenApplicationRequest {
    return OpenApplicationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OpenApplicationRequest>, I>>(object: I): OpenApplicationRequest {
    const message = createBaseOpenApplicationRequest();
    message.target = object.target ?? "";
    message.appId = object.appId ?? undefined;
    return message;
  },
};

function createBaseListApplicationRequest(): ListApplicationRequest {
  return {};
}

export const ListApplicationRequest: MessageFns<ListApplicationRequest> = {
  encode(_: ListApplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListApplicationRequest {
    return {};
  },

  toJSON(_: ListApplicationRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListApplicationRequest>, I>>(base?: I): ListApplicationRequest {
    return ListApplicationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListApplicationRequest>, I>>(_: I): ListApplicationRequest {
    const message = createBaseListApplicationRequest();
    return message;
  },
};

function createBaseListApplicationResponse(): ListApplicationResponse {
  return { apps: [] };
}

export const ListApplicationResponse: MessageFns<ListApplicationResponse> = {
  encode(message: ListApplicationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.apps) {
      Application.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApplicationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApplicationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.apps.push(Application.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApplicationResponse {
    return { apps: globalThis.Array.isArray(object?.apps) ? object.apps.map((e: any) => Application.fromJSON(e)) : [] };
  },

  toJSON(message: ListApplicationResponse): unknown {
    const obj: any = {};
    if (message.apps?.length) {
      obj.apps = message.apps.map((e) => Application.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListApplicationResponse>, I>>(base?: I): ListApplicationResponse {
    return ListApplicationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListApplicationResponse>, I>>(object: I): ListApplicationResponse {
    const message = createBaseListApplicationResponse();
    message.apps = object.apps?.map((e) => Application.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRenderRequest(): RenderRequest {
  return { json: "" };
}

export const RenderRequest: MessageFns<RenderRequest> = {
  encode(message: RenderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.json !== "") {
      writer.uint32(10).string(message.json);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.json = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenderRequest {
    return { json: isSet(object.json) ? globalThis.String(object.json) : "" };
  },

  toJSON(message: RenderRequest): unknown {
    const obj: any = {};
    if (message.json !== "") {
      obj.json = message.json;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RenderRequest>, I>>(base?: I): RenderRequest {
    return RenderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RenderRequest>, I>>(object: I): RenderRequest {
    const message = createBaseRenderRequest();
    message.json = object.json ?? "";
    return message;
  },
};

function createBaseRenderNode(): RenderNode {
  return { type: "", hasDirtyChild: false, hasDirtyProps: false, children: [] };
}

export const RenderNode: MessageFns<RenderNode> = {
  encode(message: RenderNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.hasDirtyChild !== false) {
      writer.uint32(16).bool(message.hasDirtyChild);
    }
    if (message.hasDirtyProps !== false) {
      writer.uint32(24).bool(message.hasDirtyProps);
    }
    for (const v of message.children) {
      RenderNode.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenderNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenderNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.hasDirtyChild = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hasDirtyProps = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.children.push(RenderNode.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenderNode {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      hasDirtyChild: isSet(object.hasDirtyChild) ? globalThis.Boolean(object.hasDirtyChild) : false,
      hasDirtyProps: isSet(object.hasDirtyProps) ? globalThis.Boolean(object.hasDirtyProps) : false,
      children: globalThis.Array.isArray(object?.children)
        ? object.children.map((e: any) => RenderNode.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RenderNode): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.hasDirtyChild !== false) {
      obj.hasDirtyChild = message.hasDirtyChild;
    }
    if (message.hasDirtyProps !== false) {
      obj.hasDirtyProps = message.hasDirtyProps;
    }
    if (message.children?.length) {
      obj.children = message.children.map((e) => RenderNode.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RenderNode>, I>>(base?: I): RenderNode {
    return RenderNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RenderNode>, I>>(object: I): RenderNode {
    const message = createBaseRenderNode();
    message.type = object.type ?? "";
    message.hasDirtyChild = object.hasDirtyChild ?? false;
    message.hasDirtyProps = object.hasDirtyProps ?? false;
    message.children = object.children?.map((e) => RenderNode.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

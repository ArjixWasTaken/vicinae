// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.30.2
// source: ui.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Value } from "./google/protobuf/struct";

export const protobufPackage = "proto.ext.ui";

export interface ShowToastRequest {
  title: string;
  style: string;
}

export interface PushViewRequest {
}

export interface PopViewRequest {
}

export interface CloseMainWindowRequest {
}

export interface ClearSearchBarRequest {
}

export interface ShowHudRequest {
  text: string;
}

export interface RenderRequest {
  /**
   * repeated RenderNode views = 1;
   * we will migrate to actual protobuf
   */
  json: string;
}

export interface Request {
  render?: RenderRequest | undefined;
  showToast?: ShowToastRequest | undefined;
  pushView?: PushViewRequest | undefined;
  popView?: PopViewRequest | undefined;
  clearSearch?: ClearSearchBarRequest | undefined;
  closeMainWindow?: CloseMainWindowRequest | undefined;
  showHud?: ShowHudRequest | undefined;
}

export interface RenderNode {
  type: string;
  hasDirtyChild: boolean;
  hasDirtyProps: boolean;
  props: { [key: string]: any | undefined };
  children: RenderNode[];
}

export interface RenderNode_PropsEntry {
  key: string;
  value: any | undefined;
}

function createBaseShowToastRequest(): ShowToastRequest {
  return { title: "", style: "" };
}

export const ShowToastRequest: MessageFns<ShowToastRequest> = {
  encode(message: ShowToastRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.style !== "") {
      writer.uint32(18).string(message.style);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShowToastRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShowToastRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.style = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShowToastRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      style: isSet(object.style) ? globalThis.String(object.style) : "",
    };
  },

  toJSON(message: ShowToastRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.style !== "") {
      obj.style = message.style;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShowToastRequest>, I>>(base?: I): ShowToastRequest {
    return ShowToastRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShowToastRequest>, I>>(object: I): ShowToastRequest {
    const message = createBaseShowToastRequest();
    message.title = object.title ?? "";
    message.style = object.style ?? "";
    return message;
  },
};

function createBasePushViewRequest(): PushViewRequest {
  return {};
}

export const PushViewRequest: MessageFns<PushViewRequest> = {
  encode(_: PushViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PushViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePushViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PushViewRequest {
    return {};
  },

  toJSON(_: PushViewRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PushViewRequest>, I>>(base?: I): PushViewRequest {
    return PushViewRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PushViewRequest>, I>>(_: I): PushViewRequest {
    const message = createBasePushViewRequest();
    return message;
  },
};

function createBasePopViewRequest(): PopViewRequest {
  return {};
}

export const PopViewRequest: MessageFns<PopViewRequest> = {
  encode(_: PopViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PopViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePopViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PopViewRequest {
    return {};
  },

  toJSON(_: PopViewRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PopViewRequest>, I>>(base?: I): PopViewRequest {
    return PopViewRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PopViewRequest>, I>>(_: I): PopViewRequest {
    const message = createBasePopViewRequest();
    return message;
  },
};

function createBaseCloseMainWindowRequest(): CloseMainWindowRequest {
  return {};
}

export const CloseMainWindowRequest: MessageFns<CloseMainWindowRequest> = {
  encode(_: CloseMainWindowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloseMainWindowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloseMainWindowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CloseMainWindowRequest {
    return {};
  },

  toJSON(_: CloseMainWindowRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CloseMainWindowRequest>, I>>(base?: I): CloseMainWindowRequest {
    return CloseMainWindowRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CloseMainWindowRequest>, I>>(_: I): CloseMainWindowRequest {
    const message = createBaseCloseMainWindowRequest();
    return message;
  },
};

function createBaseClearSearchBarRequest(): ClearSearchBarRequest {
  return {};
}

export const ClearSearchBarRequest: MessageFns<ClearSearchBarRequest> = {
  encode(_: ClearSearchBarRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClearSearchBarRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearSearchBarRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClearSearchBarRequest {
    return {};
  },

  toJSON(_: ClearSearchBarRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClearSearchBarRequest>, I>>(base?: I): ClearSearchBarRequest {
    return ClearSearchBarRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClearSearchBarRequest>, I>>(_: I): ClearSearchBarRequest {
    const message = createBaseClearSearchBarRequest();
    return message;
  },
};

function createBaseShowHudRequest(): ShowHudRequest {
  return { text: "" };
}

export const ShowHudRequest: MessageFns<ShowHudRequest> = {
  encode(message: ShowHudRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShowHudRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShowHudRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShowHudRequest {
    return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
  },

  toJSON(message: ShowHudRequest): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShowHudRequest>, I>>(base?: I): ShowHudRequest {
    return ShowHudRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShowHudRequest>, I>>(object: I): ShowHudRequest {
    const message = createBaseShowHudRequest();
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseRenderRequest(): RenderRequest {
  return { json: "" };
}

export const RenderRequest: MessageFns<RenderRequest> = {
  encode(message: RenderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.json !== "") {
      writer.uint32(10).string(message.json);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.json = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenderRequest {
    return { json: isSet(object.json) ? globalThis.String(object.json) : "" };
  },

  toJSON(message: RenderRequest): unknown {
    const obj: any = {};
    if (message.json !== "") {
      obj.json = message.json;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RenderRequest>, I>>(base?: I): RenderRequest {
    return RenderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RenderRequest>, I>>(object: I): RenderRequest {
    const message = createBaseRenderRequest();
    message.json = object.json ?? "";
    return message;
  },
};

function createBaseRequest(): Request {
  return {
    render: undefined,
    showToast: undefined,
    pushView: undefined,
    popView: undefined,
    clearSearch: undefined,
    closeMainWindow: undefined,
    showHud: undefined,
  };
}

export const Request: MessageFns<Request> = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.render !== undefined) {
      RenderRequest.encode(message.render, writer.uint32(10).fork()).join();
    }
    if (message.showToast !== undefined) {
      ShowToastRequest.encode(message.showToast, writer.uint32(18).fork()).join();
    }
    if (message.pushView !== undefined) {
      PushViewRequest.encode(message.pushView, writer.uint32(26).fork()).join();
    }
    if (message.popView !== undefined) {
      PopViewRequest.encode(message.popView, writer.uint32(34).fork()).join();
    }
    if (message.clearSearch !== undefined) {
      ClearSearchBarRequest.encode(message.clearSearch, writer.uint32(42).fork()).join();
    }
    if (message.closeMainWindow !== undefined) {
      CloseMainWindowRequest.encode(message.closeMainWindow, writer.uint32(50).fork()).join();
    }
    if (message.showHud !== undefined) {
      ShowHudRequest.encode(message.showHud, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.render = RenderRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.showToast = ShowToastRequest.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pushView = PushViewRequest.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.popView = PopViewRequest.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.clearSearch = ClearSearchBarRequest.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.closeMainWindow = CloseMainWindowRequest.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.showHud = ShowHudRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      render: isSet(object.render) ? RenderRequest.fromJSON(object.render) : undefined,
      showToast: isSet(object.showToast) ? ShowToastRequest.fromJSON(object.showToast) : undefined,
      pushView: isSet(object.pushView) ? PushViewRequest.fromJSON(object.pushView) : undefined,
      popView: isSet(object.popView) ? PopViewRequest.fromJSON(object.popView) : undefined,
      clearSearch: isSet(object.clearSearch) ? ClearSearchBarRequest.fromJSON(object.clearSearch) : undefined,
      closeMainWindow: isSet(object.closeMainWindow)
        ? CloseMainWindowRequest.fromJSON(object.closeMainWindow)
        : undefined,
      showHud: isSet(object.showHud) ? ShowHudRequest.fromJSON(object.showHud) : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.render !== undefined) {
      obj.render = RenderRequest.toJSON(message.render);
    }
    if (message.showToast !== undefined) {
      obj.showToast = ShowToastRequest.toJSON(message.showToast);
    }
    if (message.pushView !== undefined) {
      obj.pushView = PushViewRequest.toJSON(message.pushView);
    }
    if (message.popView !== undefined) {
      obj.popView = PopViewRequest.toJSON(message.popView);
    }
    if (message.clearSearch !== undefined) {
      obj.clearSearch = ClearSearchBarRequest.toJSON(message.clearSearch);
    }
    if (message.closeMainWindow !== undefined) {
      obj.closeMainWindow = CloseMainWindowRequest.toJSON(message.closeMainWindow);
    }
    if (message.showHud !== undefined) {
      obj.showHud = ShowHudRequest.toJSON(message.showHud);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.render = (object.render !== undefined && object.render !== null)
      ? RenderRequest.fromPartial(object.render)
      : undefined;
    message.showToast = (object.showToast !== undefined && object.showToast !== null)
      ? ShowToastRequest.fromPartial(object.showToast)
      : undefined;
    message.pushView = (object.pushView !== undefined && object.pushView !== null)
      ? PushViewRequest.fromPartial(object.pushView)
      : undefined;
    message.popView = (object.popView !== undefined && object.popView !== null)
      ? PopViewRequest.fromPartial(object.popView)
      : undefined;
    message.clearSearch = (object.clearSearch !== undefined && object.clearSearch !== null)
      ? ClearSearchBarRequest.fromPartial(object.clearSearch)
      : undefined;
    message.closeMainWindow = (object.closeMainWindow !== undefined && object.closeMainWindow !== null)
      ? CloseMainWindowRequest.fromPartial(object.closeMainWindow)
      : undefined;
    message.showHud = (object.showHud !== undefined && object.showHud !== null)
      ? ShowHudRequest.fromPartial(object.showHud)
      : undefined;
    return message;
  },
};

function createBaseRenderNode(): RenderNode {
  return { type: "", hasDirtyChild: false, hasDirtyProps: false, props: {}, children: [] };
}

export const RenderNode: MessageFns<RenderNode> = {
  encode(message: RenderNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.hasDirtyChild !== false) {
      writer.uint32(16).bool(message.hasDirtyChild);
    }
    if (message.hasDirtyProps !== false) {
      writer.uint32(24).bool(message.hasDirtyProps);
    }
    Object.entries(message.props).forEach(([key, value]) => {
      if (value !== undefined) {
        RenderNode_PropsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
      }
    });
    for (const v of message.children) {
      RenderNode.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenderNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenderNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.hasDirtyChild = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hasDirtyProps = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = RenderNode_PropsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.props[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.children.push(RenderNode.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenderNode {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      hasDirtyChild: isSet(object.hasDirtyChild) ? globalThis.Boolean(object.hasDirtyChild) : false,
      hasDirtyProps: isSet(object.hasDirtyProps) ? globalThis.Boolean(object.hasDirtyProps) : false,
      props: isObject(object.props)
        ? Object.entries(object.props).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      children: globalThis.Array.isArray(object?.children)
        ? object.children.map((e: any) => RenderNode.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RenderNode): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.hasDirtyChild !== false) {
      obj.hasDirtyChild = message.hasDirtyChild;
    }
    if (message.hasDirtyProps !== false) {
      obj.hasDirtyProps = message.hasDirtyProps;
    }
    if (message.props) {
      const entries = Object.entries(message.props);
      if (entries.length > 0) {
        obj.props = {};
        entries.forEach(([k, v]) => {
          obj.props[k] = v;
        });
      }
    }
    if (message.children?.length) {
      obj.children = message.children.map((e) => RenderNode.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RenderNode>, I>>(base?: I): RenderNode {
    return RenderNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RenderNode>, I>>(object: I): RenderNode {
    const message = createBaseRenderNode();
    message.type = object.type ?? "";
    message.hasDirtyChild = object.hasDirtyChild ?? false;
    message.hasDirtyProps = object.hasDirtyProps ?? false;
    message.props = Object.entries(object.props ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.children = object.children?.map((e) => RenderNode.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRenderNode_PropsEntry(): RenderNode_PropsEntry {
  return { key: "", value: undefined };
}

export const RenderNode_PropsEntry: MessageFns<RenderNode_PropsEntry> = {
  encode(message: RenderNode_PropsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenderNode_PropsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenderNode_PropsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenderNode_PropsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: RenderNode_PropsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RenderNode_PropsEntry>, I>>(base?: I): RenderNode_PropsEntry {
    return RenderNode_PropsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RenderNode_PropsEntry>, I>>(object: I): RenderNode_PropsEntry {
    const message = createBaseRenderNode_PropsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
